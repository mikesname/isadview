package neo4j.models

object Description {
  private def idMatch = "^.+/(\\d+)$".r
}


trait Description {
  def self: String
  lazy val id: Option[Long] = self match {
    case Description.idMatch(id) => Some(id.toLong)
    case _ => None
  }
}

trait DescriptionData {
  // deconstruct a case class to a Map
  private def getFullMap = (Map[String, Any]() /: this.getClass.getDeclaredFields) {(a, f) =>
      f.setAccessible(true)
      a + (f.getName -> f.get(this))
  }

  def toMap = getFullMap.flatMap { t => {
    t match {
      // Hack around bitmap fields generated by lazy vars...
      case (a, v) if (a != "bitmap$0") => List(t)
      case _ => Nil
    }
  }}
}
