package neo4j.models

// Enum definitions
object PublicationStatus extends Enumeration(
    "Draft", "Published") {
  type PublicationStatus = Value
  val Draft, Published = Value
}

object LevelOfDetail extends Enumeration(
    "Minimal", "Partial", "Complete") {
  type LevelOfDetail = Value
  val Minimal, Partial, Complete = Value
}

object LevelOfDescription extends Enumeration(
    "Collection", "File", "Fonds", "Subfonds", "Series", "Subseries", "Item") {
  type LevelOfDescription = Value
  val Collection, File, Fonds, Subfonds, Series, Subseries, Item = Value
}

trait JsonInstantiatable[T] {
  def fromJson(data: net.liftweb.json.JsonAST.JValue): T
}

trait Description {
  def url: Option[String]
  lazy val id: Option[Long] = url match {
    case Description.idMatch(id) => Some(id.toLong)
    case _ => None
  }
}

object Description {
  private def idMatch = "^.+/(\\d+)$".r

}


trait DescriptionData {
  // deconstruct a case class to a Map
  private def getFullMap = (Map[String, Any]() /: this.getClass.getDeclaredFields) {(a, f) =>
      f.setAccessible(true)
      a + (f.getName -> f.get(this))
  }

  def toMap = getFullMap.flatMap { t => {
    t match {
      // Hack around bitmap fields generated by lazy vars...
      case (a, v) if (a != "bitmap$0") => List(t)
      case _ => Nil
    }
  }}
}
